[general]
# this setting must be set before use, or the sites will appear as a sibiling to this repo
# this is where each periodic site will be created (by default?)
sites_root = {hpc_spack_root}/../test-spack-sites

# No setting for modules root, or build stage, because those are set in a module's spack.yaml

# TODO ? change this to default_spack_version and allow version for new site to be specified in create
spack_version = v0.19.0

[process_env_scripts]
# scripts to be sourced before running spack etc
# note that argument $1 of spdsper receives an absolute path of spack's setup-env.sh for the site in question, 
# which it sources, so that environment can be used to run spack commands
# spack-deps sets up a process environment with software that spack needs, e.g. a system compiler
# as it stands, these scripts must reside in spacksites/process-env-scripts
# TODO use the {hpc_spack_root}/ mechanism
spd_default = {hpc_spack_root}/spacksites/process-env-scripts/spack-deps.sh
spd_Windows_NONE_10 = {hpc_spack_root}/spacksites/process-env-scripts/spack-deps-win.sh
spd_Linux_ubuntu_20.04 = {hpc_spack_root}/spacksites/process-env-scripts/spack-deps-ubuntu-20.04.sh
spd_Linux_rhel_7.8 = {hpc_spack_root}/spacksites/process-env-scripts/spack-deps-rhel-7.8.sh
spd_Linux_rhel_7.9 = {hpc_spack_root}/spacksites/process-env-scripts/spack-deps-rhel-7.8.sh
spdr = {hpc_spack_root}/spacksites/process-env-scripts/spack-deps-run.sh
spdsper = {hpc_spack_root}/spacksites/process-env-scripts/spack-deps-spack-env-run.sh

[initial_site_configs]
config_default = {hpc_spack_root}/spacksites/settings/initial_site_config.yaml
modules_default = {hpc_spack_root}/spacksites/settings/initial_site_modules.yaml
packages_default = {hpc_spack_root}/spacksites/settings/initial_site_packages_default.yaml
packages_Linux_ubuntu_20.04 = {hpc_spack_root}/spacksites/settings/initial_site_packages_ubuntu.yaml
packages_Linux_rhel_7.8 = {hpc_spack_root}/spacksites/settings/initial_site_packages_rhel.yaml
packages_Linux_rhel_7.9 = {hpc_spack_root}/spacksites/settings/initial_site_packages_rhel.yaml
repos_default = {hpc_spack_root}/spacksites/settings/initial_site_repos.yaml
mirrors_default = {hpc_spack_root}/spacksites/settings/initial_site_mirrors.yaml

[spack_env_templates]
#TODO use this in the code
active_set = {hpc_spack_root}/spacksites/spack-env-templates/dev1
#TODO use this in the code
archive_root = {hpc_spack_root}/spacksites/spack-env-archive

[tmpdir_selection]
# keys - arbitrary (but of course informative)
# values - comma separated - <regex to match hostname>,<path to root of temp buidstage*>  
# *may include env vars - these will be sent to the shell to be resolved, 
# and resultant will become the value of $SPACKSITES_BUILDSTAGE_ROOT  - No!!!! cannot push this up - will need spacksites command to push this up with and eval $(.)
# Can this be done at all? - yes but restricts users to invoking spack env with spacksites command
# TODO no code to use this is yet implemented and issue is marked "wontfix" - too much complication
myriad_login = ^login.*[.]myriad[.]ucl[.]ac[.]uk$,$XDG_RUNTIME_DIR
myriad_compute = ^node.*[.]myriad[.]ucl[.]ac[.]uk$,$TMPDIR
kathleen_login = ^login.*[.]kathleen[.]ucl[.]ac[.]uk$,$XDG_RUNTIME_DIR
kathleen_compute = ^node.*[.]kathleen[.]ucl[.]ac[.]uk$,$HOME/Scratch/spacksites_buildstage
young_login = ^login.*[.]ib[.]young[.]ucl[.]ac[.]uk$,$XDG_RUNTIME_DIR
young_compute = ^node.*[.]ib[.]young[.]ucl[.]ac[.]uk$,$HOME/Scratch/spacksites_buildstage
